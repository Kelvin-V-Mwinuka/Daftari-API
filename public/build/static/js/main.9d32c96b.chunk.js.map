{"version":3,"sources":["Components/Auth/Login/Login.js","Components/Auth/Registration/Register.js","Components/Auth/Auth.js","Components/Main/AddJournal.js","Components/Main/AddNote.js","Components/Main/Profile/UserInfo.js","Components/Main/Note.js","Components/Main/Profile/Stats.js","Components/Main/Profile/Profile.js","Components/Main/Journal.js","Components/Main/Home.js","Components/Main/Main.js","App.js","serviceWorker.js","index.js","img/boy.svg","img/girl.svg","img/neutral.svg","img/unliked.svg","img/liked.svg","img/edit.svg","img/delete.svg"],"names":["Login","props","handleLogin","event","preventDefault","formData","FormData","target","url","buildUrl","base_url","path","queryParams","username","get","password","fetch","method","then","res","json","data","console","log","localStorage","setItem","JSON","stringify","getUser","alert","React","createRef","className","onSubmit","this","ref","role","type","id","name","placeholder","Component","Register","makeElementInvalid","element","classList","remove","add","makeElementValid","handleNameChange","nameText","value","setState","valid","error","handleEmailChange","emailText","email","EmailValidator","available","handleUsernameChange","usernameText","length","handlePasswordChange","passwordText","confirmPasswordText","confirmPasswordRef","current","confirmPassword","handleConfirmPasswordChange","state","handleFormSubmit","Object","keys","forEach","key","headers","body","URLSearchParams","user","gender","forhtml","onChange","aria-describedby","htmlFor","Auth","data-toggle","href","aria-controls","aria-selected","aria-labelledby","AddJournal","resetState","title","description","private","tags","onTitleChange","newTitle","trim","onPrivacyChange","checked","onDescriptionChange","newDescription","characterIndicator","replace","autosize","onTagsChange","tagList","split","map","tag","handleSubmit","form","append","_id","status","getJournals","ToastsStore","success","reset","submitButton","tagsContainer","onClick","class","store","AddNote","journal_id","text","onJournalChange","privateCheckElement","privateCheckRef","journals","journal","setAttribute","removeAttribute","onTextChange","newText","tagsList","updateNote","note","getNotes","journalRef","titleRef","textRef","user_id","join","index","UserInfo","getAvatar","src","boy","alt","girl","neutral","Note","noteLiked","i","liked_notes","getPrivateStatus","getLikeButton","likeNote","liked","unliked","getEditButton","aria-haspopup","aria-expanded","edit","getDeleteButton","del","deleteNote","getLikedNotes","Stats","Profile","notes","Journal","Home","setSelectedJournal","bind","call","selected_journal","options","masonryOptions","Main","data-target","tabIndex","aria-hidden","data-dismiss","logout","App","removeItem","userData","parse","getItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.9d32c96b.chunk.js","sourcesContent":["import React from 'react'\nimport buildUrl from 'build-url'\n\nclass Login extends React.Component{\n    \n    constructor(props){\n        super(props)\n        this.alert = React.createRef()\n    }\n\n    handleLogin = (event) => {\n        event.preventDefault()\n\n        const formData = new FormData(event.target);\n\n        // Build the URL\n        const url = buildUrl(this.props.base_url, {\n            path : \"/api/user/authenticate\",\n            queryParams : {\n                username : formData.get('username'),\n                password : formData.get('password')\n            }\n        })\n\n        fetch(url, { method : 'POST' })\n        .then( res => res.json() )\n        .then( data => {\n            if( ('statusCode' in data) || ('message' in data)){\n                console.log(data)\n            } else {\n                // Save the user to local storage if they are successfully retrieved\n                localStorage.setItem('user', JSON.stringify(data))\n                this.props.getUser()\n            }\n        } )\n    }\n\n    render(){\n        return (\n            <form className=\"auth-form\" onSubmit={this.handleLogin}>\n                <div className=\"form-group\">\n                <div ref={this.alert} className=\"alert alert-danger d-md-none\" role=\"alert\">\n                    Wrong username/email or password\n                </div>\n                </div>\n                <div className=\"form-group\">\n                    <label>Username or Email</label>\n                    <input type=\"text\" className=\"form-control\" id=\"username\" name=\"username\" placeholder=\"Enter username or email\"></input>\n                </div>\n                <div className=\"form-group\">\n                    <label>Password</label>\n                    <input type=\"password\" className=\"form-control\" id=\"password\" name=\"password\" placeholder=\"Password\"></input>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n            </form>\n        )\n    }\n}\n\nexport default Login","import React from 'react'\nimport * as EmailValidator from 'email-validator'\nimport buildUrl from 'build-url'\n\nclass Register extends React.Component{\n\n    constructor(props){\n        super(props)\n        \n        this.state = {\n            name : { value : \"\", valid : false, error : \"Please provide a name\" }, \n            email : { value : \"\", valid : false, error : \"Email already in use\" }, \n            username : { value : \"\", valid : false, error : \"Unavailable\" },\n            password : { value : \"\", valid : false, error : \"Please provide a password\" },\n            confirmPassword : { value : \"\", valid : false },\n            gender : { value : \"other\", valid : true }\n        }\n\n        this.confirmPasswordRef = React.createRef()\n    }\n\n    makeElementInvalid = (element) => {\n        /** Make form elements invalid in order to display the form element's status  */\n        element.classList.remove(\"is-valid\")\n        element.classList.add(\"is-invalid\")\n    }\n\n    makeElementValid = (element) => {\n        /** Make form elements valid in order to display the form element's status  */\n        element.classList.remove(\"is-invalid\")\n        element.classList.add(\"is-valid\")\n    }\n\n    handleNameChange = (event) => {\n        const nameText = event.target\n\n        if(nameText.value === \"\") {\n            /** If name is empty after user has already previously typed on it,\n             * make the name element invalid, and update the 'name' attribute of the state\n             */\n            this.makeElementInvalid(nameText)\n            this.setState({ name : \n                { value : nameText.value, valid : false, error : \"Please provide a name\" }\n            })\n        } else {\n            /** If name is not empty, make the name element valid\n             * and update the 'name' attribute of the state\n             */\n            this.makeElementValid(nameText)\n            this.setState({ name : { value : nameText.value, valid : true } })\n        }\n    }\n\n    handleEmailChange = (event) => {\n        const emailText = event.target\n\n        if(emailText.value === \"\"){\n            /** If email element is empty after the user has already previously typed in it,\n             * make the element invalid and update the 'email' attribute of the state\n             */\n            this.makeElementInvalid(emailText)\n            this.setState({ email : \n                { value : emailText.value, valid : false, error : \"Please provide an email address\"\n            } })\n        } else {\n            // Check email format validity\n            if(EmailValidator.validate(emailText.value)){\n                // Validate email availability on ther server if email format is valid\n                const url = buildUrl(this.props.base_url, {\n                    path : 'api/validate/email',\n                    queryParams : {\n                        email : emailText.value\n                    }\n                });\n\n                fetch(url)\n                .then( res => res.json() )\n                .then( data => {\n                    if(data.available === true){\n                        // Set email component to valid if the email is available\n                        this.makeElementValid(emailText)\n                        this.setState({ email: \n                            { value : emailText.value, valid : true }\n                        })\n                    } else {\n                        /** If the email is unavailable, make the email element invalid\n                         * and update the 'email' attribute of the state\n                         */\n                        this.makeElementInvalid(emailText)\n                        this.setState({ email : \n                            { value : emailText.value, valid : false, error : \"This email is already in use\"}\n                        })\n                    }\n                } )\n            } else {\n                /** If the email format is invalid, make the element invalid and \n                 * update the 'email' attribute of the state\n                 */\n                this.makeElementInvalid(emailText)\n                this.setState({ email :\n                    { value : emailText.value, valid : false, error : \"Please provide a valid email\"}\n                })\n            }\n        }\n    }\n\n    handleUsernameChange = (event) => {\n        const usernameText = event.target\n\n        if(usernameText.value === \"\" || usernameText.value.length < 8){\n            /** If the username is empty of shorter than 8 characters after\n             * the user has already typed in it, make the element invalid\n             * and update the 'username' attribute of the state\n             */\n            this.makeElementInvalid(usernameText)\n            this.setState({ username : \n                { value : usernameText.value, valid : false, error : \"Username must be at least 8 characters long\" }\n            })\n        } else {\n            // Check username availability on the server\n            const url = buildUrl(this.props.base_url, {\n                path : 'api/validate/username',\n                queryParams : {\n                    username : usernameText.value\n                }\n            });\n            \n            fetch(url)\n            .then( res => res.json() )\n            .then( data => {\n                if(data.available === true){\n                    /* If the username is available, make the element valid \n                    and update 'username' attribute of the state. */\n                    this.makeElementValid(usernameText)\n                    this.setState({ username:\n                        { value : usernameText.value, valid : true }\n                    })\n                } else {\n                    /** If the username is not available, make the element incalid\n                     * and update the 'username' attribute od the state\n                     */\n                    this.makeElementInvalid(usernameText)\n                    this.setState({ username : \n                        { value : usernameText.value, valid : false, error : \"Username unavailable\" }\n                     })\n                }\n            } )\n        }\n    }\n\n    handlePasswordChange = (event) => {\n        const passwordText = event.target\n\n        // Retrieve confirm password element as its values are relevant here\n        const confirmPasswordText = this.confirmPasswordRef.current\n\n        if(passwordText.value === \"\"){\n            /** If password element is empty after the user has already typed in it, \n             * make the element invalid and update the 'password' attribute of the state\n             */\n            this.makeElementInvalid(passwordText)\n            this.setState({ password :\n                { value : passwordText.value, valid : false,  error : \"Please create a password\"}\n            })\n        } else {\n            /** If the password is not empty, make the element valid and \n             * update the 'password' attribute of the state\n             */\n            this.makeElementValid(passwordText)\n            this.setState({ password :\n                { value : passwordText.value, valid : true }\n            })\n        }\n\n        if(passwordText.value !== confirmPasswordText.value){\n            /** If current typed password text is not equal to current typed confirmPassword text,\n             * make the confirmPasswordText element invalid and update the 'confirmPassword'\n             * attribute of the state\n              */\n            this.makeElementInvalid(confirmPasswordText)\n            this.setState({confirmPassword : \n                { value : confirmPasswordText.value, valid : false, error : \"Passwords don't match\" }\n            })\n        } else {\n            /** If current typed password text is equal to current typed confirmPassword text AND\n             * is not empty, make the confirmPasswordText element valid and update \n             * the 'confirmPassword' attribute of the state\n              */\n            if(passwordText.value !== \"\"){\n                this.makeElementValid(confirmPasswordText)\n                this.setState({ confirmPassword :\n                    { value : confirmPasswordText.value, valid : true }\n                })\n            }\n        }\n    }\n\n    handleConfirmPasswordChange = (event) => {\n        const confirmPasswordText = event.target\n\n        if(confirmPasswordText.value !== this.state.password.value){\n            /** If confirmPasswort text is not equal to the current state of the\n             * password, make this element invalid and update the 'confirmPassword'\n             * attribute of the state\n             */\n            this.makeElementInvalid(confirmPasswordText)\n            this.setState({ confirmPassword : \n                { value : confirmPasswordText.value, valid : false} \n            })\n        } else {\n            /** If confirmPassword text is equal to current state od the password,\n             * AND the current state of the password is NOT empty, set this element \n             * to valid and update the 'confirmPassword' attribute of the state\n             */\n            if(this.state.password.value !== \"\"){\n                this.makeElementValid(confirmPasswordText)\n                this.setState({ confirmPassword :\n                    { value : confirmPasswordText.value, valid : true }\n                })\n            }\n        }\n\n    }\n\n    handleFormSubmit = (event) => {\n        event.preventDefault()\n        // Make sure all the information is valid before sending it to the server\n        Object.keys(this.state).forEach( (key) => {\n            if(!this.state[key].valid){\n                console.log( key + \" is not valid\" );\n                return // End the form submission as soon as an invalid property is detected\n            }\n        } )\n        console.log(\"All values valid!\")\n\n        // Make the API call to register the user\n\n        fetch(this.props.base_url + \"/api/user/register\", {\n            method : 'POST',\n            headers: {\n                'Accept' : 'application/json',\n            },\n            body : new URLSearchParams(new FormData(event.target))\n        })\n        .then( res => res.json() )\n        .then( user => {\n            // Save data in localStorage\n            localStorage.setItem('user', JSON.stringify(user))\n            this.props.getUser()\n        } )\n    }\n\n    render(){\n        return (\n            <form className=\"auth-form\" onSubmit={this.handleFormSubmit}>\n                <div className=\"form-group\">\n                    <label forhtml=\"email\">Name</label>\n                    <input onChange={this.handleNameChange} type=\"text\" className=\"form-control\" id=\"name\" name=\"name\" aria-describedby=\"nameHelp\" placeholder=\"Enter name\"></input>\n                    <small id=\"nameHelp\" className=\"form-text text-muted\">You may choose wether to display this publicly to other Daftari users</small>\n                    <div className=\"valid-feedback\">Awesome!</div>\n                    <div className=\"invalid-feedback\">{this.state.name.error}</div>\n                </div>\n                <div className=\"form-group\">\n                    <label forhtml=\"email\">Email</label>\n                    <input onChange={this.handleEmailChange} type=\"email\" className=\"form-control\" id=\"email\" name=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\"></input>\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                    <div className=\"valid-feedback\">Awesome!</div>\n                    <div className=\"invalid-feedback\">{this.state.email.error}</div>\n                </div>\n                <div className=\"form-group\">\n                    <label forhtml=\"email\">Username</label>\n                    <input onChange={this.handleUsernameChange} type=\"text\" className=\"form-control\" id=\"username\" name=\"username\" aria-describedby=\"usernameHelp\" placeholder=\"Enter username\"></input>\n                    <small id=\"usernameHelp\" className=\"form-text text-muted\">This will be publicly visible to other Daftari users.</small>\n                    <div className=\"valid-feedback\">Awesome!</div>\n                    <div className=\"invalid-feedback\">{this.state.username.error}</div>\n                </div>\n                <div className=\"form-group\">\n                    <label forhtml=\"password\">Password</label>\n                    <input onChange={this.handlePasswordChange} type=\"password\" className=\"form-control\" id=\"password\" name=\"password\" placeholder=\"Password\"></input>\n                    <div className=\"valid-feedback\">Awesome!</div>\n                    <div className=\"invalid-feedback\">{this.state.password.error}</div>\n                </div>\n                <div className=\"form-group\">\n                    <label forhtml=\"confirmPassword\">Confirm password</label>\n                    <input onChange={this.handleConfirmPasswordChange} ref={this.confirmPasswordRef} type=\"password\" className=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"Password\"></input>\n                    <div className=\"valid-feedback\">Passwords match!</div>\n                    <div className=\"invalid-feedback\">Passwords don't match</div>\n                </div>\n                \n                <div className=\"form-group\">\n                    <label>Gender: </label>\n                    <div className=\"form-check form-check-inline\">\n                        <input className=\"form-check-input\" type=\"radio\" name=\"gender\" id=\"maleRadio\" value=\"male\"></input>\n                        <label className=\"form-check-label\" htmlFor=\"maleRadio\">\n                            Male\n                        </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <input className=\"form-check-input\" type=\"radio\" name=\"gender\" id=\"femaleRadio\" value=\"female\"></input>\n                        <label className=\"form-check-label\" htmlFor=\"femaleRadio\">\n                            Female\n                        </label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <input className=\"form-check-input\" type=\"radio\" name=\"gender\" id=\"otherRadio\" value=\"other\"></input>\n                        <label className=\"form-check-label\" htmlFor=\"otherRadio\">\n                            Other\n                        </label>\n                    </div>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n            </form>\n        )\n    }\n}\n\nexport default Register","import React from 'react'\n\n// Import componentss\nimport Login from './Login/Login'\nimport Register from './Registration/Register'\n\nclass Auth extends React.Component {\n    render(){\n        return(\n            <div>\n                <ul className=\"nav nav-pills mb-3\" id=\"pills-tab\" role=\"tablist\">\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link active\" id=\"pills-home-tab\" data-toggle=\"pill\" href=\"#pills-home\" role=\"tab\" aria-controls=\"pills-home\" aria-selected=\"true\">\n                            Login\n                        </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" id=\"pills-profile-tab\" data-toggle=\"pill\" href=\"#pills-profile\" role=\"tab\" aria-controls=\"pills-profile\" aria-selected=\"false\">\n                            Register\n                        </a>\n                    </li>\n                </ul>\n                <div className=\"tab-content\" id=\"pills-tabContent\">\n                    <div className=\"tab-pane fade show active\" id=\"pills-home\" role=\"tabpanel\" aria-labelledby=\"pills-home-tab\">\n                        <Login getUser={this.props.getUser} base_url={this.props.base_url} />\n                    </div>\n                    <div className=\"tab-pane fade\" id=\"pills-profile\" role=\"tabpanel\" aria-labelledby=\"pills-profile-tab\">\n                        <Register getUser={this.props.getUser} base_url={this.props.base_url} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Auth","import React from 'react'\nimport autosize from 'autosize'\nimport { ToastsContainer, ToastsStore } from 'react-toasts'\nimport './css/Journal.css'\n\nclass AddJournal extends React.Component{\n    \n    constructor(props){\n        super(props)\n\n        this.state = {\n            title : \"\",\n            description : \"\",\n            private : false,\n            tags : [],\n        }\n\n        this.characterIndicator = React.createRef();\n        this.submitButton = React.createRef();\n        this.tagsContainer = React.createRef();\n    }\n    \n    resetState = () => {\n        this.setState({\n            title : \"\",\n            description : \"\",\n            private : false,\n            tags : [],\n        })\n    }\n\n    onTitleChange = (event) => {\n        var newTitle = event.target.value.trim()\n        this.setState({ title : newTitle })\n    }\n\n    onPrivacyChange = (event) => {\n        this.setState({ private : event.target.checked })\n    }\n\n    onDescriptionChange = (event) => {  \n        const newDescription = event.target.value.trim()\n         \n        if(newDescription.length > 140){\n            // Set the character indicator red if the text lenght is >= 140\n            this.characterIndicator.current.classList.replace(\"text-success\", \"text-danger\")\n        } else {\n            // Otherwise, set it to green\n            this.characterIndicator.current.classList.replace(\"text-danger\", \"text-success\")\n        }\n        this.setState({ description : newDescription })\n        // Auto resize the textarea\n        autosize(event.target)\n    }\n\n    onTagsChange = (event) => {\n        const tagList = event.target.value.split(\";\")\n        this.setState({ tags : tagList.map( (tag) => {\n            return tag.trim()\n        } ) })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        const form = event.target\n        // Check if title is provided\n        if(!(this.state.title === \"\")){\n            const data = new FormData()\n            data.append('title', this.state.title)\n            data.append('description', this.state.description)\n            data.append('private', this.state.private)\n            data.append('tags', this.state.tags)\n            data.append('user_id', this.props.user._id)\n\n            // Make the api call to submit the form\n            fetch(this.props.base_url + \"/api/journals/create\", {\n                method : 'POST',\n                headers : {\n                    'Accept' : 'application/json'\n            },\n                body : new URLSearchParams(data)\n            })\n            .then( res => res.json() )\n            .then( data => {\n                if( 'status' in data && data.status == \"Success\"){\n                    this.props.getJournals()\n                    // Display succes toast\n                    ToastsStore.success(\"Journal created\")\n                    // Clear form\n                    form.reset()\n                    this.resetState()\n                } else {\n                    // Display failed toast\n                    ToastsStore.error(\"Journal creation failed. Try again later\")\n                }\n            })\n        } else {\n            // Display error to user\n            ToastsStore.error(\"You must provide a title\")\n        }\n    }\n\n    render(){\n        return (\n            <form className=\"data-form\" onSubmit={this.handleSubmit} >\n                <div className=\"form-group\">\n                    <label htmlFor=\"title\">Title</label>\n                    <input onChange={this.onTitleChange} type=\"text\" className=\"form-control\" id=\"title\" name=\"title\" placeholder=\"Note Title\"></input>\n                </div>\n                <div className=\"form-check\">\n                    <input onClick={this.onPrivacyChange} type=\"checkbox\" className=\"form-check-input\" id=\"private\" name=\"private\" aria-describedby=\"privateHelp\"></input>\n                    <label className=\"form-check-label\" htmlFor=\"private\">Private</label>\n                    <small id=\"privateHelp\" className=\"form-text text-muted\">\n                        All notes created in a private journal will automatically be private\n                    </small>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"tags-input\">Tags</label>\n                    <textarea onChange={this.onTagsChange} type=\"text\" className=\"form-control\" id=\"tags-input\" name=\"tags-input\" placeholder=\"Tags\" aria-describedby=\"tagsHelp\"></textarea>\n                    <small id=\"tagsHelp\" className=\"form-text text-muted\">\n                        Add semi-colon(;) at the end of text to add it to list of tags\n                    </small>\n                    <div ref={this.tagsContainer}>\n                        { this.state.tags.map( tag => (\n                                <span class=\"badge badge-warning\">{tag}</span>\n                            )\n                        )}\n                    </div>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"description-input\">Description</label>\n                    <small ref={this.characterIndicator} id=\"descriptionHelp\" className=\"form-text text-success\">\n                        { 140 - this.state.description.length } characters\n                        { this.state.description.length > 140 ? \". Description will be trimmed to 140 characters\" : \"\" }\n                    </small>\n                    <textarea className=\"form-control\" onChange={this.onDescriptionChange} id=\"description-input\" name=\"description-input\" placeholder=\"Description\" aria-describedby=\"descriptionHelp\"></textarea>\n                </div>\n\n                <button ref={this.submitButton} type=\"submit\" className=\"btn btn-primary\">\n                    Create Journal\n                </button>\n\n                <ToastsContainer store={ToastsStore} />\n            </form>\n        )   \n    }\n}\n\nexport default AddJournal","import React from 'react'\nimport buildUrl from 'build-url'\nimport autosize from 'autosize'\nimport {ToastsContainer, ToastsStore} from 'react-toasts'\n\nclass AddNote extends React.Component{\n    \n    constructor(props){\n        super(props)\n\n        this.state = {\n            journal_id : \"\",\n            title : \"\",\n            private : false,\n            text : \"\",\n            tags : [],\n\n            journals : []  // A list of the user's journals\n        }\n\n        this.privateCheckRef = React.createRef()\n        this.journalRef = React.createRef()\n        this.titleRef = React.createRef()\n        this.textRef = React.createRef()\n    }\n\n    componentDidMount(){\n        // Get the current user's journals\n        const url = buildUrl(this.props.base_url, {\n            path : \"/api/journals/retrieve\",\n            queryParams : {\n                user_id : this.props.user._id\n            }\n        })\n\n        fetch(url)\n        .then( res => res.json() )\n        .then ( data => {\n            if('journals' in data){\n                this.setState({ journals : data['journals'] })\n            }\n        })\n\n        // If a note is passed, set its values on the form\n        if(this.props.note){\n\n            // Make journal selection element invisible\n            this.journalRef.current.classList.add('d-none')\n            // Set title\n            this.titleRef.current.value = this.props.note.title\n            // Set private checkbox to checked\n            this.privateCheckRef.current.checked = (this.props.note.private === \"true\")\n            // Set the text of the note\n            this.textRef.current.value = this.props.note.text\n\n            this.setState({\n                title : this.props.note.title,\n                private : this.props.private === \"true\" ? true : false,\n                text : this.props.note.text,\n                tags : this.props.note.tags.split(\",\").map( tag => {\n                    return tag.trim()\n                } )\n            })\n        }\n\n    }\n\n    resetState = () => {\n        this.setState({\n            journal_id : \"\",\n            title : \"\",\n            private : false,\n            text : \"\",\n            tags : [],\n        })\n    }\n\n    onJournalChange = (event) => {\n        const id = event.target.value\n        this.setState({ journal_id : id})\n\n        var privateCheckElement = this.privateCheckRef.current\n\n        this.state.journals.forEach( journal => {\n            if(journal._id === id && journal.private === \"true\"){\n                // If current selected journal is private, set private to true and disable checkbox\n                this.setState({ private : true })\n                privateCheckElement.checked = true\n                privateCheckElement.setAttribute('disabled', 'disabled')\n            } else {\n                // Otherwise, uncheck it and enable it\n                privateCheckElement.removeAttribute('disabled')\n            }\n        } )\n    }\n\n    onTitleChange = (event) => {\n        const newTitle = event.target.value.trim()\n        this.setState({ title : newTitle })\n    }\n\n    onPrivacyChange = (event) => {\n        this.setState({ private : event.target.checked })\n    }\n\n    onTextChange = (event) => {\n        const newText = event.target.value.trim()\n        this.setState({ text : newText })\n        autosize(event.target)\n    }\n\n    onTagsChange = (event) => {\n        const tagsList = event.target.value.split(\";\")\n        this.setState({ tags : tagsList.map( tag => {\n            return tag.trim()\n        } ) })\n        autosize(event.target)\n    }\n\n    updateNote = () => {\n        var data = new FormData()\n        data.append(\"note_id\", this.props.note._id)\n        data.append(\"user_id\", this.props.user._id)\n        data.append(\"title\", this.state.title)\n        data.append(\"private\", this.state.private)\n        data.append(\"text\", this.state.text)\n        data.append(\"tags\", this.state.tags)\n\n        fetch(this.props.base_url + \"/api/notes/update\", {\n            method : 'POST',\n            headers : { 'Accept' : 'application/json' },\n            body : new URLSearchParams(data)\n        })\n        .then( res => res.json() )\n        .then( data => {\n            if( 'status' in data && data.status === \"Success\" ){\n                this.props.getNotes()\n                // Display success toast\n                ToastsStore.success(\"Note updated\")\n            } else {\n                // Display failed toast\n                ToastsStore.error(\"Failed to update note. Try again later\")\n            }\n        } )\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        const form = event.target\n\n        // Check if either the title or text are provided\n        if( this.state.title === \"\" && this.state.text === \"\"){\n            // Set error\n            ToastsStore.error(\"You must provide either a title or text\")\n        } else {\n            // If a note has been passed in props, call the update method instead\n            if(this.props.note){\n                this.updateNote()\n                return\n            }\n\n            // Make API call to insert the note\n            var data = new FormData()\n            data.append('journal_id', this.state.journal_id)\n            data.append('title', this.state.title)\n            data.append('private', this.state.private)\n            data.append('text', this.state.text)\n            data.append('tags', this.state.tags)\n            data.append('user_id', this.props.user._id)\n\n            fetch(this.props.base_url + \"/api/notes/create\", {\n                method: 'POST',\n                headers : {\n                    'Accept' : 'application/json'\n                },\n                body : new URLSearchParams(data)\n            })\n            .then( res => res.json() )\n            .then( data => {\n                if( 'status' in data && data.status === \"Success\" ){\n                    this.props.getNotes()\n                    // Display success toast\n                    ToastsStore.success(\"Note created\")\n                    // Clear form after note creation\n                    form.reset()\n                    this.resetState()\n                } else {\n                    // Display failed toast\n                    ToastsStore.error(\"Failed to create note. Try again later\")\n                }\n            })\n        }\n    }\n\n    render(){\n        return (\n            <form className=\"data-form\" onSubmit={this.handleSubmit} >\n                <div className=\"form-group\" ref={this.journalRef}>\n                    <label htmlFor=\"journal-select\">Journal</label>\n                    <select onChange={this.onJournalChange} className=\"form-control\" \n                    id=\"journal-select\" name=\"journal-select\">\n                        <option value=\"\">No Journal</option>\n                        {\n                            this.state.journals.map( journal => {\n                             return <option key={journal._id} value={journal._id} >\n                                        {journal.title}\n                                    </option>\n                            })\n                        }\n                    </select>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"title\">Title</label>\n                    <input ref={this.titleRef} type=\"text\" onChange={this.onTitleChange} className=\"form-control\" \n                    id=\"title\" name=\"title\" placeholder=\"Note Title\"></input>\n                </div>\n                <div className=\"form-check\">\n                    <input ref={this.privateCheckRef} onClick={this.onPrivacyChange} type=\"checkbox\" \n                    className=\"form-check-input\" id=\"private\" name=\"private\" aria-describedby=\"privateHelp\"></input>\n                    <label className=\"form-check-label\" htmlFor=\"private\">Private</label>\n                    <small id=\"privateHelp\" className=\"form-text text-muted\">\n                        All notes created in a private journal will automatically be private\n                    </small>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"tags-input\">Tags</label>\n                    <textarea onChange={this.onTagsChange} type=\"text\" className=\"form-control\" \n                    id=\"tags-input\" name=\"tags-input\" placeholder=\"Tags\" aria-describedby=\"tagsHelp\"\n                    value={this.state.tags.join(\";\")}></textarea>\n                    <small id=\"tagsHelp\" className=\"form-text text-muted\">\n                        Add semi-colon(;) at the end of text to add it to list of tags\n                    </small>\n                    <div>\n                        { this.state.tags.map( (tag, index) => (\n                                <span key={index} className=\"badge badge-success\">{tag}</span>\n                            )\n                        )}\n                    </div>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"text-input\">Text</label>\n                    <textarea ref={this.textRef} onChange={this.onTextChange} className=\"form-control\" \n                    id=\"text-input\" name=\"text-input\" placeholder=\"Text\" aria-describedby=\"textHelp\"></textarea>\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary\">\n                    { this.props.note ? \"Update Note\" : \"Create Note\" }\n                </button>\n\n                <ToastsContainer store={ToastsStore} />\n            </form>\n        )\n    }\n}\n\nexport default AddNote","import React from 'react'\n\n// Import images\nimport boy from '../../../img/boy.svg'\nimport girl from '../../../img/girl.svg'\nimport neutral from '../../../img/neutral.svg'\n\nclass UserInfo extends React.Component {\n\n    getAvatar = (user) => {\n        switch(user.gender){\n            case \"male\":\n                return <img className=\"avatar\" src={boy} alt=\"Male avatar\"/>\n            case \"female\":\n                return <img className=\"avatar\" src={girl} alt=\"Female avatar\"/>\n            default:\n                return <img className=\"avatar\" src={neutral} alt=\"Other avatar\"/>\n        }\n    }\n\n    render(){\n        return (\n            <div>\n            <div className=\"card profile-card\">\n                <div className=\"media\">\n                    <div className=\"d-flex\" href=\"#\">\n                        { this.getAvatar(this.props.user) }\n                    </div>\n                    <div className=\"media-body\">\n                        <h5>{this.props.user.name}</h5>\n                        <h6 className=\"text-muted\">\n                            {this.props.user.email} - {this.props.user.username}\n                        </h6>\n                        <p>\n                            {\n                                this.props.user.private === \"true\" ?\n                                <span className=\"badge badge-danger\">Private</span> :\n                                <span className=\"badge badge-primary\">Public</span>\n                            }\n                        </p>\n                        {/** \n                        <p>\n                            <button className=\"btn btn-primary btn-sm\">Edit</button>\n                        </p>\n                        */}\n                    </div>\n                </div>\n            </div>\n</div>\n        )\n    }\n}\n\nexport default UserInfo","import React from 'react'\nimport './css/Note.css'\n\n// Import components\nimport AddNote from './AddNote'\n\n// Import images\nimport unliked from '../../img/unliked.svg'\nimport liked from '../../img/liked.svg'\nimport edit from '../../img/edit.svg'\nimport del from '../../img/delete.svg'\n\nclass Note extends React.Component {\n\n    noteLiked = () => {\n        // Check if the note has been liked\n        for(var i=0; i < this.props.liked_notes.length; i++){\n            if(this.props.liked_notes[i]._id === this.props.note._id){\n                return true\n            }\n        }\n        return false\n    }\n\n    getPrivateStatus = () => {\n        if(this.props.note.private === \"true\"){\n            return <span className=\"badge badge-danger\">Private</span>\n        }\n        return <span className=\"badge badge-info\">Public</span>\n    }\n\n    getLikeButton = () => {\n        this.noteLiked()\n        if(!this.noteLiked()){\n            return <button onClick={this.likeNote} className=\"btn btn-secondary btn-sm note-button\">\n                <span>\n                    <img className=\"note-icon\" src={unliked} alt=\"Liked icon\"></img>\n                </span>\n                <b>Like</b>\n                </button>\n        } else {\n            return <button onClick={this.likeNote} className=\"btn btn-secondary btn-sm note-button\">\n                <span>\n                    <img className=\"note-icon\" src={liked} alt=\"Unliked icon\"></img>\n                </span>\n                <b>Unlike</b>\n                </button>\n        }\n    }\n\n    getEditButton = () => {\n        // Return edit button if the user owns the note\n        if(this.props.user._id === this.props.note.user_id){\n\n            const editButton = \n            <div className=\"dropdown note-dropdown\">\n                <button className=\"btn btn-secondary btn-sm note-button\" id=\"editButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    <span>\n                        <img className=\"note-icon\" src={edit} alt=\"Edit icon\"></img>\n                    </span>\n                    <b>Edit</b>\n                </button>\n                <div className=\"dropdown-menu\" aria-labelledby=\"editButton\">\n                    <AddNote \n                    base_url={this.props.base_url}\n                    user={this.props.user}\n                    note={this.props.note}\n                    getNotes={this.props.getNotes} />\n                </div>\n            </div>\n            return editButton\n        }\n    }\n\n    getDeleteButton = () => {\n        // Return the delete button if the user owns the note\n        if(this.props.user._id === this.props.note.user_id){\n\n            const deleteButton = \n            <div className=\"dropdown note-dropdown\">\n                <button className=\"btn btn-secondary btn-sm note-button\" id=\"deleteButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    <span>\n                        <img className=\"note-icon\" src={del} alt=\"Delete icon\"></img>\n                    </span>\n                    <b>Delete</b>\n                </button>\n                <div className=\"dropdown-menu\" aria-labelledby=\"deleteButton\">\n                <a className=\"dropdown-item\" href=\"#\">Close</a>\n                <a className=\"dropdown-item\" onClick={this.deleteNote} href=\"#\">Delete</a>\n                </div>\n            </div>\n\n            return deleteButton\n        }\n    }\n\n    deleteNote = (event) => {\n        var data = new FormData()\n        data.append('note_id', this.props.note._id)\n        data.append('user_id', this.props.user._id)\n\n        fetch(this.props.base_url + \"/api/notes/delete\", {\n            method : 'POST',\n            headers : { 'Accept' : 'application/json' },\n            body : new URLSearchParams(data)\n        })\n        .then( res => res.json() )\n        .then( data => {\n            if('status' in data && data.status === \"Success\"){\n                this.props.getNotes()\n            }\n        } )\n    }\n\n    likeNote = (event) => {\n        var data = new FormData()\n        data.append('note_id', this.props.note._id)\n        data.append('user_id', this.props.user._id)\n        \n        fetch(this.props.base_url + \"/api/notes/like\", {\n            method : 'POST',\n            headers: { 'Accept' : 'application/json' },\n            body : new URLSearchParams(data)\n        })\n        .then( res => res.json() )\n        .then( data => {\n            if('action' in data){\n                // Get liked notes\n                this.props.getLikedNotes()\n            }\n        } )\n    }\n\n    render(){\n        return (\n            <div className=\"card note-card shadow-lg\">\n                <div className=\"card-body\">\n                    <h5 className=\"card-title note-title\">{this.props.note.title}</h5>\n                    <p className=\"card-text note-text\">\n                        {this.props.note.text}\n                    </p>\n                    <p>\n                        {\n                            this.props.note.tags.split(\",\").map( (tag, index) => {\n                                return <span key={index} className=\"badge badge-success\">{tag.trim()}</span>\n                            })\n                        }\n                    </p>\n                    <p>\n                        { this.getPrivateStatus() }\n                    </p>\n                    <div>\n                        { this.getLikeButton() }\n                        { this.getEditButton() }\n                        { this.getDeleteButton() }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Note","import React from 'react'\n\n// Import components\nimport Note from '../Note'\n\nclass Stats extends React.Component {\n\n    render(){\n        return (\n            <div>\n                <h5><b>Liked Notes</b></h5>\n                <div className=\"container-fluid\">\n                    <div className=\"row flex-row flex-nowrap\">\n                        {\n                            this.props.liked_notes.map( note => {\n                                return <Note\n                                key={note._id}\n                                note={note}\n                                base_url={this.props.base_url}\n                                user={this.props.user}\n                                liked_notes={this.props.liked_notes}\n                                getLikedNotes={this.props.getLikedNotes} />\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Stats","import React from 'react'\nimport '../css/Profile.css'\n\n// Import components\nimport UserInfo from './UserInfo'\nimport Stats from './Stats'\n\nclass Profile extends React.Component{\n\n    render(){\n        return (\n            <div>\n                \n                <UserInfo \n                base_url={this.props.base_url} \n                user={this.props.user} />\n                \n                <Stats \n                base_url={this.props.base_url} \n                user={this.props.user}\n                journals={this.props.journals}\n                notes={this.props.notes}\n                liked_notes={this.props.liked_notes}\n                getLikedNotes={this.props.getLikedNotes} />\n\n            </div>\n        )\n    }\n}\n\nexport default Profile","import React from 'react'\nimport './css/Journal.css'\n\n// Import logos\n\nclass Journal extends React.Component {\n\n    getPrivateStatus = (journal) => {\n        if(journal.private === \"true\"){\n            return \"Private\"\n        }\n        return \"Public\"\n    }\n\n    getEditButton = () => {\n        // Return the edit button if the journal belongs to the user \n    }\n\n    getDeleteButton = () => {\n        // Return the delete button if the journal belongs to the user\n    }\n\n    render(){\n        return(\n                    this.props.journal === null ?\n                \n                    // Display card showing empty journal\n                    <div className=\"card journal-card shadow-lg\">\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title journal-title\">No Journal</h5>\n                            <h6 className=\"card-text journal-text\">\n                                Notes that don't belong to any journal\n                                { this.getEditButton() }\n                                { this.getDeleteButton() }\n                            </h6>\n                        </div>\n                    </div> \n                    \n                    :\n                \n                    // Display card showing journal details\n                    <div className=\"card journal-card shadow-lg\">\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title journal-title\">\n                                {this.props.journal.title}\n                            </h5>\n                            <p className=\"card-text journal-text\">\n                                {this.props.journal.description}\n                            </p>\n                            <p>\n                                {\n                                    this.props.journal.tags.split(\",\").map( tag => {\n                                        return <span key={tag} className=\"badge badge-warning\">{tag.trim()}</span>\n                                    })\n                                }\n                            </p>\n                        </div>\n                    </div>\n        )\n    }\n}\n\nexport default Journal","import React from 'react'\nimport Masonry from 'react-masonry-component'\n\n// Import components\nimport Journal from './Journal'\nimport Note from './Note'\n\nclass Home extends React.Component {\n\n    constructor(props){\n        super(props)\n        \n        this.state = {\n            journals : [],\n            notes : [],\n            selected_journal : null\n        }\n    }\n\n    onJournalChange = (event) => {\n        this.props.setSelectedJournal.bind(this, event.target.value).call()\n    }\n\n    render(){\n\n        return(\n            <div>\n                <div className=\"d-flex flex-row\">\n                    <select onChange={this.onJournalChange} className=\"custom-select\" id=\"journal-select\">\n                        <option value=\"\">No Journal</option>\n                        {\n                            this.props.journals.map( journal => {\n                                return  <option key={journal._id} value={journal._id} >\n                                            {journal.title}\n                                        </option>\n                            } )\n                        }\n                    </select>\n                </div>\n\n                <Journal \n                base_url={this.props.base_url} \n                user={this.props.user} \n                journal={this.props.selected_journal} />\n                \n                <Masonry\n                options={this.masonryOptions}\n                className=\"notes-grid d-flex flex-wrap\">\n                    {\n                        this.props.notes.map( note => {\n                        return    <Note key={note._id}\n                                        base_url={this.props.base_url}\n                                        user={this.props.user}\n                                        note={note}\n                                        liked_notes={this.props.liked_notes}\n                                        getLikedNotes={this.props.getLikedNotes}\n                                        getNotes={this.props.getNotes} />\n                        })\n                    }\n                </Masonry>\n            </div>\n        )\n    }\n}\n\nexport default Home","import React from 'react'\nimport buildUrl from 'build-url'\n\n// Import components\nimport AddJournal from './AddJournal'\nimport AddNote from './AddNote'\nimport Profile from './Profile/Profile'\nimport Home from './Home'\n/*\nimport Explore from './Explore/Explore'\nimport Settings from './Settings' */\n\nclass Main extends React.Component{\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            journals : [],\n            notes : [],\n            liked_notes : [],\n            selected_journal : null\n        }\n    }\n\n    componentDidMount(){\n        // Get user's journals\n        this.getJournals()\n        // Get user's notes for current selected journal\n        this.getNotes()\n        // Get user's liked notes\n        this.getLikedNotes()\n    }\n\n    getJournals = () => {\n        // Retrieve all of the user's journals\n        const url = buildUrl(this.props.base_url, {\n            path : \"api/journals/retrieve\",\n            queryParams : {\n                user_id : this.props.user._id\n            }\n        })\n        fetch(url)\n        .then( res => res.json() )\n        .then( data => {\n           if('journals' in data){\n               this.setState({ journals : data.journals })\n           }\n        })\n    }\n\n    getNotes = () => {\n        // Retrieve all of the user's notes from the selected journal\n        var id = null\n\n        this.state.selected_journal === null ? id = '' : id = this.state.selected_journal._id\n\n        const url = buildUrl(this.props.base_url, {\n            path : \"/api/notes/retrieve\",\n            queryParams : {\n                user_id : this.props.user._id,\n                journal_id : id\n            }\n        })\n\n        fetch(url, { method : 'GET', headers : { 'Accept' : 'application/json' } })\n        .then( res => res.json() )\n        .then( data => {\n            if('notes' in data){\n                this.setState({ notes : data.notes })\n            }\n        })\n    }\n\n    setSelectedJournal = (id) => {\n        // Set selected journal to null if no id value is provided (i.e No Journal selected)\n        if(id === \"\"){\n            this.setState({ selected_journal : null }, () => {\n                // Retrieve notes after setState is finished\n                this.getNotes()\n            })\n        }\n        // Otherwise, select the appropriate journal\n        this.state.journals.forEach( journal => {\n            if(journal._id === id){\n                this.setState({ selected_journal : journal }, () => {\n                    // Retrieve the selected journal's notes after setState is finished\n                    this.getNotes()\n                })\n            }\n        } ) \n    }\n\n    getLikedNotes = () => {\n        const url = buildUrl(this.props.base_url, {\n            path : \"/api/notes/liked\",\n            queryParams : {\n                user_id : this.props.user._id\n            }\n        })\n        fetch(url, { method : 'GET', headers : { 'Accept' : 'application/json' } })\n        .then( res => res.json() )\n        .then( data => {\n            if('notes' in data){\n                this.setState({ liked_notes : data.notes })\n            }\n        } )\n    }\n\n    render(){\n\n        return(\n            <div>\n                <ul className=\"nav nav-pills mb-3\" id=\"pills-tab\" role=\"tablist\">\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link active\" id=\"pills-home-tab\" data-toggle=\"pill\" href=\"#pills-home\" role=\"tab\" aria-controls=\"pills-home\" aria-selected=\"true\">\n                            Home\n                        </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" id=\"pills-profile-tab\" data-toggle=\"pill\" href=\"#pills-profile\" role=\"tab\" aria-controls=\"pills-profile\" aria-selected=\"false\">\n                            Profile\n                        </a>\n                    </li>\n                    {/*\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" id=\"pills-contact-tab\" data-toggle=\"pill\" href=\"#pills-explore\" role=\"tab\" aria-controls=\"pills-contact\" aria-selected=\"false\">\n                            Explore\n                        </a>\n                    </li> */}\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" id=\"pills-journal-tab\" data-toggle=\"pill\" href=\"#pills-add-journal\" role=\"tab\" aria-controls=\"pills-add-journal\" aria-selected=\"false\">\n                            Add Journal\n                        </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" id=\"pills-note-tab\" data-toggle=\"pill\" href=\"#pills-add-note\" role=\"tab\" aria-controls=\"pills-add-note\" aria-selected=\"false\">\n                            Add Note\n                        </a>\n                    </li>\n                    {/** \n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" id=\"pills-contact-tab\" data-toggle=\"pill\" href=\"#pills-settings\" role=\"tab\" aria-controls=\"pills-contact\" aria-selected=\"false\">\n                            Settings\n                        </a>\n                    </li>*/}\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" id=\"pills-logout-tab\" data-toggle=\"modal\" data-target=\"#logoutModal\" aria-selected=\"false\">\n                            Logout\n                        </a>\n                    </li>\n                </ul>\n                <div className=\"tab-content\" id=\"pills-tabContent\">\n                    <div className=\"tab-pane fade show active\" id=\"pills-home\" role=\"tabpanel\" aria-labelledby=\"pills-home-tab\">\n                        <Home\n                        base_url={this.props.base_url} \n                        user={this.props.user}\n                        journals={this.state.journals}\n                        notes={this.state.notes}\n                        liked_notes={this.state.liked_notes}\n                        selected_journal={this.state.selected_journal}\n                        setSelectedJournal={this.setSelectedJournal}\n                        getLikedNotes={this.getLikedNotes}\n                        getNotes={this.getNotes} />\n                    </div>\n                    <div className=\"tab-pane fade\" id=\"pills-profile\" role=\"tabpanel\" aria-labelledby=\"pills-home-tab\">\n                        <Profile\n                        base_url={this.props.base_url} \n                        user={this.props.user}\n                        journals={this.state.journals}\n                        notes={this.state.notes}\n                        liked_notes={this.state.liked_notes}\n                        getLikedNotes={this.getLikedNotes} />\n                    </div>\n                    {/*\n                    <div className=\"tab-pane fade\" id=\"pills-explore\" role=\"tabpanel\" aria-labelledby=\"pills-home-tab\">\n                        <Explore />\n                    </div> */}\n                    <div className=\"tab-pane fade\" id=\"pills-add-journal\" role=\"tabpanel\" aria-labelledby=\"pills-profile-tab\">\n                        <AddJournal \n                        base_url={this.props.base_url} \n                        user={this.props.user}\n                        getJournals={this.getJournals} />\n                    </div>\n                    <div className=\"tab-pane fade\" id=\"pills-add-note\" role=\"tabpanel\" aria-labelledby=\"pills-contact-tab\">\n                        <AddNote \n                        base_url={this.props.base_url} \n                        user={this.props.user}\n                        getNotes={this.getNotes} />\n                    </div>\n                    {/*\n                    <div className=\"tab-pane fade\" id=\"pills-settings\" role=\"tabpanel\" aria-labelledby=\"pills-contact-tab\">\n                        <Settings user={this.props.user} />\n                    </div>\n                    */}\n                </div>\n\n                {/* Logout Modal */}\n                <div className=\"modal fade\" id=\"logoutModal\" tabIndex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content\">\n                    <div className=\"modal-body\">\n                        <p>Are you sure you want to log out?</p>\n                        <button type=\"button\" className=\"btn btn-secondary note-button\" data-dismiss=\"modal\">Close</button>\n                        <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\" onClick={this.props.logout}>Logout</button>\n                    </div>\n                    </div>\n                </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Main","import React from 'react';\nimport './App.css';\n\n// Import components\nimport Auth from './Components/Auth/Auth'\nimport Main from './Components/Main/Main'\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      user : null,\n      base_url : 'http://localhost:8000'\n    }\n  }\n\n  logout = () => {\n    // Delete user details from local storage and reset state\n    localStorage.removeItem('user')\n    this.setState({ user : null })\n  }\n\n  getUser = () => {\n    // Read user data from local storage, if it's not null, store it to the state\n    const userData = JSON.parse(localStorage.getItem('user'))\n    if(userData !== null){\n      this.setState({user : userData})\n    }\n  }\n\n  componentDidMount(){\n    this.getUser()\n  }\n\n  render(){\n    return (\n      <div>\n        { this.state.user === null ? \n            <Auth base_url={this.state.base_url} getUser={this.getUser} /> : \n            <Main base_url={this.state.base_url} user={this.state.user} logout={this.logout} />\n        }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/boy.333fa0cb.svg\";","module.exports = __webpack_public_path__ + \"static/media/girl.038dbd32.svg\";","module.exports = __webpack_public_path__ + \"static/media/neutral.fcfc134f.svg\";","module.exports = __webpack_public_path__ + \"static/media/unliked.9b613ce3.svg\";","module.exports = __webpack_public_path__ + \"static/media/liked.d654ce19.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.d37d9400.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.e204e045.svg\";"],"sourceRoot":""}